/* @flow */
import path from 'path'

const SEP_FOR_SYMBOLS = '\n/* SYMBOLS */\n'
const SEP_FOR_TYPE_AND_COMMENT = ' //: '

export function buildTempFile(list: string[]) {
  const refs = list.map((fpath, index) => {
    const relpath = '../../' + fpath.replace(process.cwd(), '')
    const base = path
      .basename(fpath)
      .replace(/\.jsx?/, '')
      .replace(/\-/, '$')
    const ref = `_${index}_${base}`
    return { ref, fpath }
  })
  return (
    '/* @flow */\n' +
    refs
      .map((r, index) => {
        const relpath = path.join('../..', r.fpath.replace(process.cwd(), ''))
        return `import ${r.ref} from '${relpath}'`
      })
      .join('\n') +
    SEP_FOR_SYMBOLS +
    refs
      .map((r, index) => {
        const relpath = path.join('../../' + r.fpath.replace(process.cwd(), ''))
        return `${r.ref}${SEP_FOR_TYPE_AND_COMMENT}{"line": ${3 +
          refs.length +
          index}, "symbolFor": "${relpath}"}`
      })
      .join('\n')
  )
}

export function parseTmpSource(source: string) {
  const [, symbolLines] = source.split(SEP_FOR_SYMBOLS)
  const lines = symbolLines.split('\n')
  const symbols = lines
    .map(line => line.split(SEP_FOR_TYPE_AND_COMMENT)[1])
    .map(jsonExpr => JSON.parse(jsonExpr))
  return symbols
}

export const buildStoryCode = (fpath: string, props: any) => `/* @flow */
import React from 'react'
import { storiesOf } from '@storybook/react'
const ctx = storiesOf('Generated by flow', module)
import C from '${fpath}'
ctx.add('${fpath}', () => <C {...${JSON.stringify(props)}}/>)
`
